{"version":3,"sources":["logo.svg","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","isPWA","setPWA","useEffect","window","matchMedia","matches","navigator","standalone","document","referrer","includes","console","log","className","src","logo","alt","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"oNAAe,MAA0B,iC,MCuD1BA,MAnDf,WAAgB,IAAD,EACWC,oBAAS,GADpB,mBACNC,EADM,KACCC,EADD,KAiCb,OAzBAC,qBAAU,WAJRC,OAAOC,WAAW,8BAA8BC,SAChDF,OAAOG,UAAUC,YACjBC,SAASC,SAASC,SAAS,mBAIzBT,GAAO,GACPU,QAAQC,IAAI,OACZD,QAAQC,IACN,0DACAT,OAAOC,WAAW,8BAA8BC,QAChD,8BACAF,OAAOG,UAAUC,WACjB,+CACAC,SAASC,SAASC,SAAS,qBAG7BC,QAAQC,IAAI,OACZD,QAAQC,IACN,0DACAT,OAAOC,WAAW,8BAA8BC,QAChD,8BACAF,OAAOG,UAAUC,WACjB,+CACAC,SAASC,SAASC,SAAS,mBAE7BT,GAAO,MAER,IAED,qBAAKY,UAAU,MAAf,SACE,yBAAQA,UAAWb,EAAQ,aAAe,aAA1C,WACIA,GAAS,qBAAKc,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACpD,4BAAIhB,EAAQ,MAAQ,oBACnBA,GACC,mBACEa,UAAU,WACVI,KAAK,6DAFP,qCC/BJC,EAAcC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BnB,UAAUoB,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf5B,UAAUoB,cAAcS,YAI1BxB,QAAQC,IACN,+GAKEa,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBlB,QAAQC,IAAI,sCAGRa,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAACC,GACN5B,QAAQ4B,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1C,SAAS2C,eAAe,SFSnB,SAAkB1B,GACvB,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAI8C,IAAIC,YAAwBlD,OAAOiB,SAASH,MACpDqC,SAAWnD,OAAOiB,SAASkC,OAIvC,OAGFnD,OAAOoD,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM6B,YAAN,sBAEPnC,IAgEV,SAAiCM,EAAOC,GAEtC+B,MAAMhC,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5B7B,MAAK,SAAC8B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxD,UAAUoB,cAAcqC,MAAMnC,MAAK,SAACC,GAClCA,EAAamC,aAAapC,MAAK,WAC7BzB,OAAOiB,SAAS6C,eAKpB1C,EAAgBC,EAAOC,MAG1Ba,OAAM,WACL3B,QAAQC,IAAI,oEAtFVsD,CAAwB1C,EAAOC,GAI/BnB,UAAUoB,cAAcqC,MAAMnC,MAAK,WACjCjB,QAAQC,IACN,+GAMJW,EAAgBC,EAAOC,OE/B/B0C,GAKA3B,M","file":"static/js/main.3c1bfa8e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [isPWA, setPWA] = useState(false);\n\n  const isInStandaloneMode = () =>\n    window.matchMedia(\"(display-mode: standalone)\").matches ||\n    window.navigator.standalone ||\n    document.referrer.includes(\"android-app://\");\n\n  useEffect(() => {\n    if (isInStandaloneMode()) {\n      setPWA(true);\n      console.log(\"PWA\");\n      console.log(\n        'window.matchMedia(\"(display-mode: standalone)\").matches',\n        window.matchMedia(\"(display-mode: standalone)\").matches,\n        \"window.navigator.standalone\",\n        window.navigator.standalone,\n        'document.referrer.includes(\"android-app://\")',\n        document.referrer.includes(\"android-app://\")\n      );\n    } else {\n      console.log(\"WEB\");\n      console.log(\n        'window.matchMedia(\"(display-mode: standalone)\").matches',\n        window.matchMedia(\"(display-mode: standalone)\").matches,\n        \"window.navigator.standalone\",\n        window.navigator.standalone,\n        'document.referrer.includes(\"android-app://\")',\n        document.referrer.includes(\"android-app://\")\n      );\n      setPWA(false);\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className={isPWA ? \"PWA-header\" : \"App-header\"}>\n        {!isPWA && <img src={logo} className=\"App-logo\" alt=\"logo\" />}\n        <p>{isPWA ? \"PWA\" : \"Web application\"}</p>\n        {isPWA && (\n          <a\n            className=\"PWA-link\"\n            href=\"https://www.notion.so/PWA-a2afc0be10fb4f5a82d549af3a777eb3\"\n          >\n            PWA documentation\n          </a>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}